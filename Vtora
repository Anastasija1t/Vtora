#include <iostream>
#include <cstring>

using namespace std;

class SpaceObject{
    private:
    char name[100];
    char type[100];
    int distanceFromEarth;
    public:
    SpaceObject(){
        
    }
    
    SpaceObject(char *name, char *type, int distanceFromEarth)
    {
        strcpy(this->name,name);
        strcpy(this->type,type);
        this->distanceFromEarth=distanceFromEarth;
    }
    
     SpaceObject(const SpaceObject &s)
    {
      strcpy(this->name, s.name);
      strcpy(this->type, s.type);
      this->distanceFromEarth = s.distanceFromEarth;
    }
    
    ~SpaceObject(){}
    
     char *getName(){
         return this->name;
     }
    
     char *getType(){
         return this->type;
     }
     
     int getDistanceFromEarth(){
         return this->distanceFromEarth;
     }
     
     void setName(char *name){
         strcpy(this->name, name);
     }
     
     void setType(char *type){
         strcpy(this->type, type);
     }
     
     void setDistanceFromEarth(int distanceFromEarth){
         this->distanceFromEarth=distanceFromEarth;
     }
     
     void print(){
         cout<<name<<" ("<<type<<") - distance: "<<distanceFromEarth<<" light years away from Earth"<<endl;
     }
    
};

class Alien{
    private:
    char name[100];
    int age;
    char homePlanet[100];
    int numObj;
    SpaceObject spaceObjects[100];
    public:
    Alien(){}
    
    Alien(char *name, int age, char *homePlanet, int numObj, SpaceObject *objects){
        strcpy(this->name,name);
        this->age = age;
        strcpy(this->homePlanet,homePlanet);
        this->numObj = numObj;
        for(int i=0;i<numObj;i++)
        {
            this->spaceObjects[i]=objects[i];
        }
    }
    
    Alien(const Alien &a)
    {
      strcpy(this->name, a.name);
      this->age = a.age;
      strcpy(this->homePlanet, a.homePlanet);
      this->numObj = a.numObj;
      for(int i=0;i<a.numObj;i++){
          this->spaceObjects[i] = a.spaceObjects[i];
      }
    }
    
    ~Alien(){}
    
    char *getName(){
        return this->name;
    }
    
    int getAge(){
        return this->age;
    }
    
    char *getHomePlanet(){
        return this->homePlanet;
    }
    
    int getNumObj(){
        return this->numObj;
    }
    
    SpaceObject *getSpaceObjects(){
        return spaceObjects;
    }
    
    void setName(char *name){
        strcpy(this->name,name);
    }
    
    void setAge(){
        this->age = age;
    }
    
    void setHomePlanet(char *homePlanet){
        strcpy(this->homePlanet,homePlanet);
    }
    
    SpaceObject getObjectClosestToEarth(){
        int minDistance=999999999, idx=0;
        
        for(int i=0;i<numObj;i++)
        {
            if(spaceObjects[i].getDistanceFromEarth()<minDistance)
            {
                minDistance=spaceObjects[i].getDistanceFromEarth();
                idx=i;
            }
        }
        return spaceObjects[idx];
    }
    
    void print(){
        cout<<"Alien name: "<<name<<endl;
        cout<<"Alien age: "<<age<<endl;
        cout<<"Alien home planet: "<<homePlanet<<endl;
        cout<<"Favourite space object closest to earth: ";
        getObjectClosestToEarth().print();
    }
    
};

//DO NOT CHANGE THE MAIN FUNCTION 
int main()
{
    char name[100], homePlanet[100];
    int age, numObj;
    cin>>name>>age>>homePlanet>>numObj;
    //Testing default constructor for SpaceObject
    SpaceObject spaceObjects[numObj];
    for(int i=0; i<numObj; i++)
    {
        char spaceObjectName[100], spaceObjectType[100];
        int distanceFromEarth;
        cin>>spaceObjectName>>spaceObjectType>>distanceFromEarth;
        //Testing constructor with arguments for SpaceObject
        spaceObjects[i]=SpaceObject(spaceObjectName, spaceObjectType, distanceFromEarth);
    }
    //Testing default constructor for Alien
    Alien alien;
    //Testing constructor with arguments for Alien and copy constructor for Alien
    alien=Alien(name, age, homePlanet, numObj, spaceObjects);
    Alien alien2 = Alien(alien);
 
    alien2.print();
    return 0;
}
PASTEBIN
Search...

LOGIN SIGN UP
andrejxd
Untitled
ANDREJXD
MAR 26TH, 2024
10
0
NEVER
ADD COMMENT
Not a member of Pastebin yet? Sign Up, it unlocks many cool features!
6.01 KB | None |  
  
#include <iostream>
#include <cstring>
#include <cmath>
using namespace std;
class Employee{
private:
    char name[100];
    char surname[100];
    int salary;
 
public:
    Employee() {} // default constructor
 
    Employee(const char* name, const char* surname, int salary) {
        std::strcpy(this->name, name);
        std::strcpy(this->surname, surname);
        this->salary = salary;
    }
 
    Employee(const Employee& other) {
        std::strcpy(this->name, other.name);
        std::strcpy(this->surname, other.surname);
        this->salary = other.salary;
    }
 
    const char* getName() const {
        return name;
    }
 
    void setName(const char* name) {
        std::strcpy(this->name, name);
    }
 
    const char* getSurname() const {
        return surname;
    }
 
    void setSurname(const char* surname) {
        std::strcpy(this->surname, surname);
    }
 
    int getSalary() const {
        return salary;
    }
 
    void setSalary(int salary) {
        this->salary = salary;
    }
 
    void printEmployee() {
        cout << "Employee name: " << name << endl;
        cout << "Employee surname: " << surname << endl;
        cout << "Employee salary: " << salary << endl;
    }
};
 
class TechCompany{
private:
    char name[100];
    Employee employees[20];
    int numEmployees;
 
public:
    TechCompany() {} // default constructor
 
    TechCompany(const char* name) {
        std::strcpy(this->name, name);
        numEmployees = 0;
    }
 
    TechCompany(const TechCompany& other) {
        std::strcpy(this->name, other.name);
        numEmployees = other.numEmployees;
        for (int i = 0; i < numEmployees; i++) {
            employees[i] = other.employees[i];
        }
    }
 
    const char* getName() const {
        return name;
    }
 
    void setName(const char* name) {
        std::strcpy(this->name, name);
    }
 
    int getNumEmployees() const {
        return numEmployees;
    }
 
    const Employee& getEmployee(int index) const {
        return employees[index];
    }
 
    void addEmployee(const Employee& employee) {
        if (numEmployees < 20) {
            employees[numEmployees++] = employee;
        }
    }
 
    double getAverageOfEmployeesSalary() {
        double totalSalary = 0;
        for (int i = 0; i < numEmployees; i++) {
            totalSalary += employees[i].getSalary();
        }
        if (numEmployees > 0) {
            return totalSalary / numEmployees;
        } else {
            return 0;
        }
    }
 
    void printTechCompany() {
        cout << "Tech company name: " << name << endl;
        cout << "Number of employees: " << numEmployees << endl;
    }
};
 
TechCompany printCompanyWithHighestAverageSalary(TechCompany companies[], int numCompanies) {
    int highestIndex = -1;
    double highestAverageSalary = -1;
 
    for (int i = 0; i < numCompanies; i++) {
        double averageSalary = companies[i].getAverageOfEmployeesSalary();
 
        if (averageSalary > highestAverageSalary) {
            highestAverageSalary = averageSalary;
            highestIndex = i;
        }
    }
    return companies[highestIndex];
}
 
TechCompany printCompanyWithHighestStdSalary(TechCompany companies[], int numCompanies) {
    int highestIndex = -1;
    double highestStdSalary = -1;
 
    for (int i = 0; i < numCompanies; i++) {
        int numEmployees = companies[i].getNumEmployees();
 
        double meanSalary = companies[i].getAverageOfEmployeesSalary();
        double variance = 0.0;
 
        for (int j = 0; j < numEmployees; j++) {
            double diff = companies[i].getEmployee(j).getSalary() - meanSalary;
            variance += diff * diff;
        }
 
        double stdSalary = std::sqrt(variance / (numEmployees-1));
 
        if (stdSalary > highestStdSalary) {
            highestStdSalary = stdSalary;
            highestIndex = i;
        }
    }
 
    return companies[highestIndex];
}
 
bool isSameCompany(TechCompany company1, TechCompany company2) {
    return (std::strcmp(company1.getName(), company2.getName()) == 0);
}
 
//DO NOT CHANGE main()
 
int main() {
    const int MAX_COMPANIES = 10;
    const int MAX_EMPLOYEES = 20;
 
    TechCompany companies[MAX_COMPANIES];
 
    int n;
    std::cin >> n;
 
    for (int i = 0; i < n; i++) {
        char name[100];
        std::cin >> name;
 
        TechCompany company(name);
 
        int m;
        std::cin >> m;
 
        for (int j = 0; j < m; j++) {
            char name[100];
            char surname[100];
            int salary;
 
            std::cin >> name;
 
            std::cin >> surname;
 
            std::cin >> salary;
 
            Employee employee(name, surname, salary);
 
            company.addEmployee(employee);
        }
 
        companies[i] = company;
    }
 
    TechCompany copy = companies[0];
 
    std::cout<<"-->Testing get and set methods for one object and copy constructor"<<std::endl;
    copy.setName("copy");
    std::cout << copy.getName() << std::endl;
 
 
    std::cout<<"-->Testing addEmployee function"<<std::endl;
    Employee newEmployee("John", "Doe", 5000);
    copy.addEmployee(newEmployee);
    std::cout << "Number of employees in copy: " << copy.getNumEmployees() << std::endl;
 
 
    std::cout<<"-->Testing copy of first employee"<<std::endl;
    Employee firstEmployee = copy.getEmployee(0);
    firstEmployee.printEmployee();
 
 
    std::cout<<"-->Testing methods"<<std::endl;
    TechCompany t = printCompanyWithHighestAverageSalary(companies, n);
    TechCompany t1 = printCompanyWithHighestStdSalary(companies, n);
 
    std::cout << "Tech company with the highest average salary: " << t.getName() << std::endl;
    std::cout << "Tech company with the highest standard deviation for salaries: " <<t1.getName() << std::endl;
 
    if (isSameCompany(t, t1)){
        std::cout<<"The tech company: "<<t.getName()<<" has the highest standard deviation and highest average salary"<<std::endl;
    }
    return 0;
}
